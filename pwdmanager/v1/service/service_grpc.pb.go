// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	structs "pwdmanager/v1/structs"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PasswordManagerClient is the client API for PasswordManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordManagerClient interface {
	GetPasswords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*structs.PasswordList, error)
}

type passwordManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordManagerClient(cc grpc.ClientConnInterface) PasswordManagerClient {
	return &passwordManagerClient{cc}
}

func (c *passwordManagerClient) GetPasswords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*structs.PasswordList, error) {
	out := new(structs.PasswordList)
	err := c.cc.Invoke(ctx, "/pwdmanager.service.PasswordManager/GetPasswords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordManagerServer is the server API for PasswordManager service.
// All implementations must embed UnimplementedPasswordManagerServer
// for forward compatibility
type PasswordManagerServer interface {
	GetPasswords(context.Context, *Empty) (*structs.PasswordList, error)
	mustEmbedUnimplementedPasswordManagerServer()
}

// UnimplementedPasswordManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordManagerServer struct {
}

func (UnimplementedPasswordManagerServer) GetPasswords(context.Context, *Empty) (*structs.PasswordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPasswords not implemented")
}
func (UnimplementedPasswordManagerServer) mustEmbedUnimplementedPasswordManagerServer() {}

// UnsafePasswordManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordManagerServer will
// result in compilation errors.
type UnsafePasswordManagerServer interface {
	mustEmbedUnimplementedPasswordManagerServer()
}

func RegisterPasswordManagerServer(s *grpc.Server, srv PasswordManagerServer) {
	s.RegisterService(&_PasswordManager_serviceDesc, srv)
}

func _PasswordManager_GetPasswords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordManagerServer).GetPasswords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pwdmanager.service.PasswordManager/GetPasswords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordManagerServer).GetPasswords(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PasswordManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pwdmanager.service.PasswordManager",
	HandlerType: (*PasswordManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPasswords",
			Handler:    _PasswordManager_GetPasswords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pwdmanager/v1/service/service.proto",
}
